package model

import akka.actor._
import play.libs.Akka
import scala.concurrent.Future
import play.api.libs.concurrent.Execution.Implicits._
import scala.concurrent.duration._
import scala.collection.mutable.ListBuffer

class Server extends Actor {
  val system = akka.actor.ActorSystem("system") 
  var players = Map.empty[Int, ActorRef]
  var id: Int = 0
  var workingPlayers: Int = 0;
  var playersData = new ListBuffer[PlayerData]()
  
  system.scheduler.schedule(Duration.Zero, Duration(16, MILLISECONDS))(sendMoveTicks)
  
  def sendMoveTicks() = {
    players.values.foreach(_ ! TickPositionRequest)
  }
                        
  def GetUniqueId() = {
      id = id + 1
      val currentId = id
      currentId
  } 
  
  def receive = {
    case Join =>
      workingPlayers = workingPlayers + 1;
      val uID = GetUniqueId()
      players = players + (uID -> sender) 
      sender ! SubscribedID(uID)  
   
    /*
    case Goodbye(uID) => 
      players = (players - uID)
      workingPlayers = workingPlayers - 1;
    */  
    case PlayerData (uID, positionX, positionY, size) => 
      playersData += PlayerData (uID, positionX, positionY, size)
      if (playersData.length >= workingPlayers) {
        val listPlayerData = playersData.toList
        players.values.foreach(_ ! EntitiesInView(listPlayerData))
        playersData.clear()
      }         
  }
}

object Server {
  val serv = Akka.system.actorOf(Props[Server])  
  
  def getActorRef() = {serv}
}

